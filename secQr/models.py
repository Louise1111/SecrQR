from django.db import models
import qrcode
from io import BytesIO
from django.core.files.base import ContentFile
from PIL import Image
from django.core.validators import URLValidator
from django.core.exceptions import ValidationError
from datetime import datetime
from django.conf import settings  # Import settings to access app prefix
import requests
from django.conf import settings
api_key = "a759ba9c8a836e1bde3da7da0567d32842fa186ffaf1999f5cdbeff92e519fa8"
url = 'https://www.virustotal.com/vtapi/v2/url/report'

class Scan(models.Model):
    url = models.CharField(max_length=200)
    result = models.CharField(max_length=20, default="Unknown")  # Default value for result
    scanned_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.url

    def perform_scan(self):
        api_key = settings.VIRUS_TOTAL_API_KEY  # Get API key from settings
        url = 'https://www.virustotal.com/vtapi/v2/url/report'

        params = {'apikey': api_key, 'resource': self.url}
        response = requests.get(url, params=params)
        
        if response.status_code == 200:
            response_json = response.json()
            if 'positives' in response_json:
                positives = response_json['positives']
                if positives <= 3:
                    self.result = "NOT MALICIOUS"
                elif 5 <= positives <= 9:
                    self.result = "MAYBE MALICIOUS"
                elif positives >= 10:
                    self.result = "MALICIOUS"
            else:
                self.result = "INVALID URL"
        else:
            self.result = "Error"
        
        self.save()
    def verify_qr_code(self, expected_app_prefix):
        # Check if the QR code's app prefix matches the expected value
        if expected_app_prefix in self.url:
            return "Generated by secQr"
        else:
            return "Generated by third-party app"
class Generate(models.Model):
    description = models.CharField(max_length=200)
    link = models.CharField(max_length=200)
    qr_code = models.ImageField(blank=True, upload_to='qrcodes/')
    date = models.DateField(auto_now_add=True)
    _app_prefix_hidden = models.CharField(max_length=50, default='SecQR', editable=False)

    def __str__(self):
        return str(self.link)

    @property
    def app_prefix(self):
        # This property can be used to access the app prefix
        return self._app_prefix_hidden

    @app_prefix.setter
    def app_prefix(self, value):
        # This setter method can be used to set the app prefix
        self._app_prefix_hidden = value

    def save(self, *args, **kwargs):
        # Validate the link before generating QR code
        validate_url = URLValidator()
        try:
            validate_url(self.link)
        except ValidationError:
            raise ValidationError("Invalid URL")

        # Scan the URL to check for malicious content
        url_status = self.scan_url()
        
        if url_status == "NOT MALICIOUS":
            # If the URL is not malicious, generate QR code
            self.generate_qr_code()
            
        elif url_status == "MAYBE MALICIOUS" or url_status == "MALICIOUS":
            raise ValidationError("Malicious URL detected")
        else:
            raise ValidationError(url_status)

        super().save(*args, **kwargs)

    def scan_url(self):
        # Define the parameters for the API request
        params = {'apikey': api_key, 'resource': self.link, 'param_name': 'param_value'}

        # Perform the VirusTotal API request to scan the URL
        response = requests.get(url, params=params)
        
        # Check if the request was successful
        if response.status_code == 200:
            response_json = response.json()
            if 'positives' in response_json:
                positives = response_json['positives']
                if positives <= 3:
                    return "NOT MALICIOUS"
                elif 5 <= positives <= 9:
                    return "MAYBE MALICIOUS"
                elif positives >= 10:
                    return "MALICIOUS"
            else:
                return "Unknown"
        else:
            return "Error"
        
    def generate_qr_code(self):
        if not self.qr_code:
            # Generate QR code with padding set to 0
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,  # Adjust box size as needed
                border=0,     # Set border to 0
            )

            # Concatenate link and app prefix (encoded)
            qr_data = f"{self.link}###{self._app_prefix_hidden}"  # Use a custom separator like '###'
            qr.add_data(qr_data)
            qr.make(fit=True)

            qr_img = qr.make_image(fill_color="black", back_color="white")

            # Resize the QR code image
            qr_img = qr_img.resize((370, 370))  # Adjust size if needed

            # Save the QR code image
            buffer = BytesIO()
            qr_img.save(buffer, format='PNG')
            filename = f"secQRResult_{self.date}.png"

            self.qr_code.save(filename, ContentFile(buffer.getvalue()), save=False)
